<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchLib</name>
    </assembly>
    <members>
        <member name="T:TwitchLib.Enums.StreamIdentifierType">
            <summary>Enum representing various ways to represent a stream id.</summary>
        </member>
        <member name="F:TwitchLib.Enums.StreamIdentifierType.Usernames">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Enums.StreamIdentifierType.UserIds">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Enums.VideoPlaybackType">
            <summary>Valid playback types.</summary>
        </member>
        <member name="F:TwitchLib.Enums.VideoPlaybackType.StreamUp">
            <summary>On stream up</summary>
        </member>
        <member name="F:TwitchLib.Enums.VideoPlaybackType.StreamDown">
            <summary>On stream down</summary>
        </member>
        <member name="F:TwitchLib.Enums.VideoPlaybackType.ViewCount">
            <summary>On view count</summary>
        </member>
        <member name="T:TwitchLib.Enums.BadgeColor">
            <summary>Color enum representing color based on cheer amount.</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Red">
            <summary>Red = 10000+</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Blue">
            <summary>Blue = 5000 -> 9999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Green">
            <summary>Green = 1000 -> 4999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Purple">
            <summary>Purple = 100 -> 999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Gray">
            <summary>Gray = 1 -> 99</summary>
        </member>
        <member name="T:TwitchLib.Enums.ChatColorPresets">
            <summary>Enum representing the available chat name color presets.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Blue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Coral">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.DodgerBlue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.SpringGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.YellowGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Green">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.OrangeRed">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Red">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.GoldenRod">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.HotPink">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.CadetBlue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.SeaGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Chocolate">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.BlueViolet">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Firebrick">
            <summary>Chat color name.</summary>
        </member>
        <member name="T:TwitchLib.Enums.CommercialLength">
            <summary>A list of valid commercial lengths.</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds30">
            <summary>30 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds60">
            <summary>60 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds90">
            <summary>90 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds120">
            <summary>120 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds150">
            <summary>150 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds180">
            <summary>180 second commercial</summary>
        </member>
        <member name="T:TwitchLib.Enums.LogType">
            <summary>Enum to alter color effects in log</summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Normal">
            <summary>White</summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Failure">
            <summary>Red</summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Success">
            <summary>Green</summary>
        </member>
        <member name="T:TwitchLib.Enums.Period">
            <summary>Period value used to specify time frame for clips.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Day">
            <summary>Represents a single day.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Week">
            <summary>Represents a single week.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Month">
            <summary>Represents a single month.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.All">
            <summary>Represents a all time frames.</summary>
        </member>
        <member name="T:TwitchLib.Enums.PubSubRequestType">
            <summary>Enum representing various request types for PubSub service</summary>
        </member>
        <member name="F:TwitchLib.Enums.PubSubRequestType.ListenToTopic">
            <summary>Type of request to listen to a specific topic</summary>
        </member>
        <member name="T:TwitchLib.Enums.SendReceiveDirection">
            <summary>Enum to show which direction the message was detected from.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SendReceiveDirection.Sent">
            <summary>Used for logging, direction of data.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SendReceiveDirection.Received">
            <summary>Used for logging, direction of data.</summary>
        </member>
        <member name="T:TwitchLib.Enums.SortDirection">
            <summary>A list of valid sorting directions.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortDirection.Descending">
            <summary>Descending sort direction.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortDirection.Ascending">
            <summary>Ascending sort direction.</summary>
        </member>
        <member name="T:TwitchLib.Enums.SortKey">
            <summary>Enum representing sort keys available for /follows/channels/</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.CreatedAt">
            <summary>SortKey representing the date/time of account creation</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.LastBroadcaster">
            <summary>SortKey representing the date/time of the last broadcast of a channel</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.Login">
            <summary>SortKey representing the alphabetical sort based on usernames</summary>
        </member>
        <member name="T:TwitchLib.Enums.StreamType">
            <summary>Types of a stream</summary>
        </member>
        <member name="F:TwitchLib.Enums.StreamType.Live">
            <summary>Live stream</summary>
        </member>
        <member name="F:TwitchLib.Enums.StreamType.Playlist">
            <summary>Preset playlist</summary>
        </member>
        <member name="F:TwitchLib.Enums.StreamType.All">
            <summary>"All"</summary>
        </member>
        <member name="T:TwitchLib.Enums.StringEnum">
            <summary>Really cool way of doing string enums, credits to RogueException (https://github.com/RogueException)</summary>
        </member>
        <member name="P:TwitchLib.Enums.StringEnum.Value">
            <summary>Value of enum</summary>
        </member>
        <member name="M:TwitchLib.Enums.StringEnum.#ctor(System.String)">
            <summary>StringEnum constructor.</summary>
        </member>
        <member name="M:TwitchLib.Enums.StringEnum.ToString">
            <summary>Returns string value for overriden ToString()</summary>
            <returns>Enum value</returns>
        </member>
        <member name="T:TwitchLib.Enums.ThrottleType">
            <summary>Enum representing the available throttle types.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.TooManyMessages">
            <summary>Throttle based on too many messages.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.MessageTooShort">
            <summary>Throttle based on message being too short.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.MessageTooLong">
            <summary>Throttle based on message being too long.</summary>
        </member>
        <member name="T:TwitchLib.Enums.UserType">
            <summary>Enum representing various user-types.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Viewer">
            <summary>The standard user-type representing a standard viewer.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Moderator">
            <summary>User-type representing viewers with channel-specific moderation powers.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.GlobalModerator">
            <summary>User-type representing viewers with Twitch-wide moderation powers.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Broadcaster">
            <summary>User-type representing the broadcaster of the channel</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Admin">
            <summary>User-type representing viewers with Twitch-wide moderation powers that are paid.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Staff">
            <summary>User-type representing viewers that are Twitch employees.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnBeingHostedArgs">
            <summary>Args representing an event where another channel has started hosting the broadcaster's channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.BotUsername">
            <summary>Property representing bot username that received this event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.HostedByChannel">
            <summary>Property representing the channel that has started hosting the broadcaster's channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.Viewers">
            <summary>Property representing the number of viewers in the host. If not detected, will be -1.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.Channel">
            <summary>Property representing the channel received state from.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.IsAutoHosted">
            <summary>Property representing whether or not host was auto or not.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChannelStateChangedArgs">
            <summary>Args representing on channel state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChannelStateChangedArgs.ChannelState">
            <summary>Property representing the current channel state.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChannelStateChangedArgs.Channel">
            <summary>Property representing the channel received state from.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatClearedArgs">
            <summary>Args representing a cleared chat event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatClearedArgs.Channel">
            <summary>Channel that had chat cleared event.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatColorChangedArgs">
            <summary>Args representing a successful chat color change request.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatColorChangedArgs.Channel">
            <summary>Property reprenting the channel the event was received in.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatCommandReceivedArgs">
            <summary>Args representing chat command received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatCommandReceivedArgs.Command">
            Property representing received command.
        </member>
        <member name="T:TwitchLib.Events.Client.OnLeftChannelArgs">
            <summary>Args representing the client left a channel event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnLeftChannelArgs.BotUsername">
            <summary>The username of the bot that left the channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnLeftChannelArgs.Channel">
            <summary>Channel that bot just left (parted).</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnConnectedArgs">
            <summary>Args representing on connected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectedArgs.Username">
            <summary>Property representing bot username.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectedArgs.AutoJoinChannel">
            <summary>Property representing connected channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnConnectionErrorArgs">
            <summary>Args representing client connection error event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectionErrorArgs.Error">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectionErrorArgs.Username">
            <summary>Username of the bot that suffered connection error.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnDisconnectedArgs">
            <summary>Args representing client disconnect event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnDisconnectedArgs.Username">
            <summary>Username of the bot that was disconnected.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnExistingUsersDetectedArgs">
            <summary>Args representing existing user(s) detected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnExistingUsersDetectedArgs.Users">
            <summary>Property representing string list of existing users.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnExistingUsersDetectedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnHostingStartedArgs">
            <summary>Args representing hosting started event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.HostingChannel">
            <summary>Property representing channel that started hosting.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.TargetChannel">
            <summary>Property representing targeted channel, channel being hosted.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.Viewers">
            <summary>Property representing number of viewers in channel hosting target channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnHostingStoppedArgs">
            <summary>Args representing hosting stopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStoppedArgs.HostingChannel">
            <summary>Property representing hosting channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStoppedArgs.Viewers">
            <summary>Property representing number of viewers that were in hosting channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnIncorrectLoginArgs">
            <summary>Args representing an incorrect login event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnIncorrectLoginArgs.Exception">
            <summary>Property representing exception object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnJoinedChannelArgs">
            <summary>Args representing on channel joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnJoinedChannelArgs.Username">
            <summary>Property representing bot username.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnJoinedChannelArgs.Channel">
            <summary>Property representing the channel that was joined.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnMessageReceivedArgs">
            <summary>Args representing message received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnMessageReceivedArgs.ChatMessage">
            <summary>Property representing received chat message.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnMessageSentArgs">
            <summary>Args representing message sent event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnMessageSentArgs.SentMessage">
            <summary>Property representing a chat message that was just sent (check null on properties before using).</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorJoinedArgs">
            <summary>Args representing moderator joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorJoinedArgs.Username">
            <summary>Property representing username of joined moderator.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorJoinedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorLeftArgs">
            <summary>Args representing moderator leave event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorLeftArgs.Username">
            <summary>Property representing username of moderator that left..</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorLeftArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorsReceivedArgs">
            <summary>Args representing a list of moderators received from chat.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorsReceivedArgs.Channel">
            <summary>Property representing the channel the moderator list came from.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorsReceivedArgs.Moderators">
            <summary>Property representing the list of moderators.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnNewSubscriberArgs">
            <summary>Args representing new subscriber event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNewSubscriberArgs.Subscriber">
            <summary>Property representing subscriber object.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNewSubscriberArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnNowHostingArgs">
            <summary>Args representing the detected hosted channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNowHostingArgs.Channel">
            <summary>Property the channel that received the event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNowHostingArgs.HostedChannel">
            <summary>Property representing channel that is being hosted.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnReSubscriberArgs">
            <summary>Args representing resubscriber event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnReSubscriberArgs.ReSubscriber">
            <summary>Property representing resubscriber object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnSendReceiveDataArgs">
            <summary>Args representing on channel state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnSendReceiveDataArgs.Direction">
            <summary>Property representing the direction of the data.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnSendReceiveDataArgs.Data">
            <summary>Property representing the data that was either sent or received.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserStateChangedArgs">
            <summary>Args representing on user state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserStateChangedArgs.UserState">
            <summary>Property representing user state object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserBannedArgs">
            <summary>Args representing a user was banned event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.Channel">
            <summary>Channel that had ban event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.Username">
            <summary>User that was banned.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.BanReason">
            <summary>Reason for ban, if it was provided.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserJoinedArgs">
            <summary>Args representing viewer joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserJoinedArgs.Username">
            <summary>Property representing username of joined viewer.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserJoinedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserLeftArgs">
            <summary>Args representing viewer left event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserLeftArgs.Username">
            <summary>Property representing username of user that left.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserLeftArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserTimedoutArgs">
            <summary>Args representing a user was timed out event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.Channel">
            <summary>Channel that had timeout event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.Username">
            <summary>Viewer that was timedout.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.TimeoutDuration">
            <summary>Duration of timeout IN SECONDS.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.TimeoutReason">
            <summary>Reason for timeout, if it was provided.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs">
            <summary>Args representing whisper command received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.WhisperMessage">
            <summary>Property representing chat message object.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.Command">
            <summary>Property representing received command.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.ArgumentsAsString">
            <summary>Property representing arguements in form of string.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.ArgumentsAsList">
            <summary>Property representing arguements in form of string list.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.CommandIdentifier">
            <summary>Property representing the character command identifier.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperReceivedArgs">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperReceivedArgs.WhisperMessage">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperSentArgs">
            <summary>Args representing whisper sent event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Username">
            <summary>Property representing username of bot.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Receiver">
            <summary>Property representing receiver of the whisper.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Message">
            <summary>Property representing sent message contents.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnBanArgs">
            <summary>Object representing the arguments for a ban event</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BannedUser">
            <summary>Property representing banned user</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BanReason">
            <summary>Property representing ban reason.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BannedBy">
            <summary>Property representing the moderator who banned user.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnBitsReceivedArgs">
            <summary>Object representing the arguments for bits received event</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Username">
            <summary>Property of for username.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChannelName">
            <summary>Property for channel name.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.UserId">
            <summary>Property for user id.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChannelId">
            <summary>Property for channel id.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Time">
            <summary>Property for time.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChatMessage">
            <summary>Property for chat message</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.BitsUsed">
            <summary>Property for bits used.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.TotalBitsUsed">
            <summary>Property for total bits used.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Context">
            <summary>Property for context</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnClearArgs">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnClearArgs.Moderator">
            <summary>Property representing username of moderator who cleared chat.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnEmoteOnlyArgs">
            <summary>Class representing arguments of emotes only event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnEmoteOnlyArgs.Moderator">
            <summary>Property representing moderator who issued moderator only command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnEmoteOnlyOffArgs">
            <summary>Class representing emotesonly off event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnEmoteOnlyOffArgs.Moderator">
            <summary>Property representing moderator who issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnHostArgs">
            <summary>Class representing arguments of on host event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnHostArgs.Moderator">
            <summary>Property representing moderator who issued command.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnHostArgs.HostedChannel">
            <summary>Property representing hosted channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnListenResponseArgs">
            <summary>Class representing arguments for a listen response.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Topic">
            <summary>Property representing the topic that was listened to</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Response">
            <summary>Property representing the response as Response object</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Successful">
            <summary>Property representing if request was successful.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnPubSubServiceErrorArgs">
            <summary>Class representing a pubsub service error event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnPubSubServiceErrorArgs.Exception">
            <summary>Property representing exception.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnR9kBetaArgs">
            <summary>Class representing event where r9k was enabled</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnR9kBetaArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnR9kBetaOffArgs">
            <summary>Class representing event where r9k was turned off.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnR9kBetaOffArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnStreamDownArgs">
            <summary>Class representing stream going down event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamDownArgs.ServerTime">
            <summary>Property representing the server time of event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamDownArgs.PlayDelay">
            <summary>Property representing the play delay.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnStreamUpArgs">
            <summary>Class representing when a stream starts event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamUpArgs.ServerTime">
            <summary>Property representing the server time.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamUpArgs.PlayDelay">
            <summary>Property representing play delay.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnSubscribersOnlyArgs">
            <summary>Class representing subscriber only mode event starting.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnSubscribersOnlyArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnSubscribersOnlyOffArgs">
            <summary>Class representing subscriber only mode turning off event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnSubscribersOnlyOffArgs.Moderator">
            <summary>Property representing the moderator that issued the command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnTimeoutArgs">
            <summary>Class representing timeout event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimedoutUser">
            <summary>Property representing the timedout user.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimeoutDuration">
            <summary>Property representing the tumeout duration.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimeoutReason">
            <summary>Property representing the timeout reaosn.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimedoutBy">
            <summary>Property representing the moderator that issued the command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnUnbanArgs">
            <summary>OnUnban event arguments class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUnbanArgs.UnbannedUser">
            <summary>Name of user that was unbanned.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUnbanArgs.UnbannedBy">
            <summary>Name of moderator that issued unban command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnUntimeoutArgs">
            <summary>Untimeout argument class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUntimeoutArgs.UntimeoutedUser">
            <summary>User that was untimed out (ie unbanned for a timeout)</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUntimeoutArgs.UntimeoutedBy">
            <summary>Moderator that issued the untimeout command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnViewCountArgs">
            <summary>ViewCount arguments class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnViewCountArgs.ServerTime">
            <summary>Server time issued by Twitch.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnViewCountArgs.Viewers">
            <summary>Number of viewers at current time.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnWhisperArgs">
            <summary>[INCOMPLETE/NOT_FULLY_SUPPORTED]Whisper arguement class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnWhisperArgs.Whisper">
            <summary>Property representing the whisper object.</summary>
        </member>
        <member name="M:TwitchLib.Events.PubSub.OnWhisperArgs.#ctor">
            <summary>Whisper args class constructor.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamsSetArgs">
            <summary>Class representing event args for StreamsSet event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamsSetArgs.Channels">
            <summary>Event property representing channels the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamsSetArgs.IdentifierType">
            <summary>Event property representing how channels IDs are represented.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamsSetArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorEndedArgs">
            <summary>Class representing event args for OnChannelMonitorEnded event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorEndedArgs.Channels">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorEndedArgs.IdentifierType">
            <summary>Event property representing how channels IDs are represented.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorEndedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorStartedArgs">
            <summary>Class representing event args for OnChannelMonitorStarted event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorStartedArgs.Channels">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorStartedArgs.IdentifierType">
            <summary>Event property representing how channels IDs are represented.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamMonitorStartedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOfflineArgs">
            <summary>Class representing event args for OnChannelOffline event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOfflineArgs.Channel">
            <summary>Event property representing channel that has gone offline.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOfflineArgs.IdentifierType">
            <summary>Event property representing how channels IDs are represented.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOfflineArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOnlineArgs">
            <summary>Class representing event args for OnChannelOnline event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOnlineArgs.Channel">
            <summary>Event property representing channel that has gone online.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOnlineArgs.IdentifierType">
            <summary>Event property representing how channels IDs are represented.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.LiveStreamMonitor.OnStreamOnlineArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs">
            <summary>Class representing event args for OnNewFollowersDetected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.ChannelIdentifier">
            <summary>Event property representing whether channeldata is a channel name or channel id.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.ChannelData">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.NewFollowers">
            <summary>Event property representing all new followers detected.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs">
            <summary>Class representing event args for OnServiceStarted event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.ChannelIdentifier">
            <summary>Event property representing whether channeldata is a channel name or channel Id.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.ChannelData">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs">
            <summary>Class representing event args for OnServiceStopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.ChannelIdentifier">
            <summary>Event property representing whether channel data is a channel name or a channel id.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.ChannelData">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs">
            <summary>Class representing event args for OnClientThrottled.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.ThrottleViolation">
            <summary>Event property representing reason why message was throttled.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.Message">
            <summary>Event property representing message that failed to send due to throttling.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.PeriodDuration">
            <summary>Event property representing message that failed to send due to throttling.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.MessageThrottler.OnThrottlePeriodResetArgs">
            <summary>Class representing event args for OnServiceStopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnThrottlePeriodResetArgs.TimeInPeriod">
            <summary>Event property representing number of seconds in new throttle period.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadParameterException">
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadParameterException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadRequestException">
            <summary>Exception representing a request that doesn't have a clientid attached.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadRequestException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.NotPartneredException">
            <summary>Exception representing a request to a partner only resource under an unpartnered account.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.NotPartneredException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.StreamOfflineException">
            <summary>Exception representing an attempt to fetch stream data on a stream that is offline.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.StreamOfflineException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CompleteUpload.MissingPartsException">
            <summary>Exception thrown attempting to finish an upload without all parts.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CompleteUpload.MissingPartsException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InternalServerErrorException">
            <summary>Exception representing an internal server error while creating a video.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InternalServerErrorException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.InvalidChannelException">
            <summary>Exception thrown when attempting to upload to an invalid channel.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.InvalidChannelException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.UnauthorizedException">
            <summary>Exception thrown when the passed access token doesn't have the correct scope.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.UnauthorizedException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.BadPartException">
            <summary>Exception thrown when this library detects the part is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.BadPartException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.ContentLengthRequiredException">
            <summary>Exception thrown when a content-length is missing from the upload request.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.ContentLengthRequiredException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.UploadFailedException">
            <summary>Thrown when Twitch reports a failure of the upload.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.UploadFailedException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InvalidUploadTokenException">
            <summary>Exception thrown when the identifying video token is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InvalidUploadTokenException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InvalidVideoIdException">
            <summary>Exception thrown when the video Id provided is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InvalidVideoIdException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadScopeException">
            <summary>Exception representing a provided scope was not permitted.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadScopeException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.InvalidCredentialException">
            <summary>Exception representing a detection that sent credentials were invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.InvalidCredentialException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadResourceException">
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadResourceException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.BadListenException">
            <summary>Exception thrown when an event is subscribed to when it shouldn't be.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.BadListenException.#ctor(System.String,System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.IllegalAssignmentException">
            <summary>Exception thrown when attempting to assign a variable with a different value that is not allowed.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.IllegalAssignmentException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.EventNotHandled">
            <summary>Exception thrown when an event that is not handled is required to be handled.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.EventNotHandled.#ctor(System.String,System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.InvalidParameterException">
            <summary>Exception representing bad information being provided to function/method.</summary>
        </member>
        <member name="P:TwitchLib.Exceptions.Client.InvalidParameterException.Username">
            <summary>Username that had the exception.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.InvalidParameterException.#ctor(System.String,System.String)">
            <summary>Exception construtor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.ErrorLoggingInException">
            <summary>Exception representing credentials provided for logging in were bad.</summary>
        </member>
        <member name="P:TwitchLib.Exceptions.Client.ErrorLoggingInException.Username">
            <summary>Exception representing username associated with bad login.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.ErrorLoggingInException.#ctor(System.String,System.String)">
            <summary>Exception construtor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Services.UninitializedChannelDataException">
            <summary>Exception representing no channel data set.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Services.UninitializedChannelDataException.#ctor(System.String)">
            <summary>Exception constructor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Services.UnintializedChannelListException">
            <summary>Exception representing no channel list being provided.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Services.UnintializedChannelListException.#ctor(System.String)">
            <summary>Exception constructor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Services.BadQueryCountException">
            <summary>Exception representing an invalid cache size provided.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Services.BadQueryCountException.#ctor(System.String)">
            <summary>Exception constructor.</summary>
        </member>
        <member name="T:TwitchLib.Extensions.Client.BanUserExt">
            <summary>Extension implementing the ban functionality in TwitchClient.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using JoinedChannel
            </summary>
            <param name="channel">JoinedChannel object to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using a string for the channel
            </summary>
            <param name="channel">Channel in string form to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using the first joined channel
            </summary>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.ChangeChatColorExt">
            <summary>Extension implementing the change chat color functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,System.String,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.ClearChatExt">
            <summary>Extension for implementing clear chat functionality in TwitchClient.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send clear chat command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="channel">String representation of which channel to send clear chat command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.CommercialExt">
            <summary>Extension for implementing Commercial functionality in TwitchClient.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,System.String,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="channel">String representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.EmoteOnlyExt">
            <summary>Extension for implementing emote only mode functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the enable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient,System.String)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="channel">String representation of the channel to send the enable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the disable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="channel">String representation of the channel to send the disable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.FollowersOnlyExt">
            <summary>Extension for implementing followers online mode functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="channel">JoinedChannel representation of channel to send command to</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.HostExt">
            <summary>Extension for implementing host functionality in TwitchClient.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="channel">JoinedChannel representation of which channel to send the host command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="channel">String representation of which channel to send the host command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the unhost command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="channel">String representation of the channel to send the unhost command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.ModExt">
            <summary>Extension implementing the ability to mod a viewer in TwitchClient.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.ReplyWhisperExt">
            <summary>Extension implementing reply to previous whisper functionality.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ReplyWhisperExt.ReplyToLastWhisper(TwitchLib.TwitchClient,System.String,System.Boolean)">
            <summary>SendWhisper wrapper method that will send a whisper back to the user who most recently sent a whisper to this bot.</summary>
        </member>
        <member name="T:TwitchLib.Extensions.Client.SlowModeExt">
            <summary>Extension to implement slowmode functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="channel">JoinedChannel representation of which channel to send the slow command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="channel">String representation of which channel to send the slow command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeoff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send slowoff command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="channel">String representation of which channel to send slowoff command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOff(TwitchLib.TwitchClient)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.SubscribersOnly">
            <summary>Extension implementing subscriber only functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient,System.String)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">String representation of which channel to send subscriber only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only off command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables subscriber only mode in chat.
            </summary>
            <param name="channel">String representation of which channel to send subscriber only off command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.TimeoutUserExt">
            <summary>Extension implementing timeout functionality in TwitchClient</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            TImesout a user in chat using a JoinedChannel object.
            </summary>
            <param name="channel">Channel object to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,System.String,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Timesout a user in chat using a string for the channel.
            </summary>
            <param name="channel">Channel in string form to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Timesout a user using the first joined channel.
            </summary>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Extensions.Client.UnbanUserExt">
            <summary>Extension to implement unban functionality.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using JoinedChannel
            </summary>
            <param name="channel">JoinedChannel object to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,System.String,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using a string for the channel
            </summary>
            <param name="channel">Channel in string form to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            /// <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using first joined channel.
            </summary>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Internal.Rfc2812">
            <summary>Class detailing Rfc2812 specifications</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.IsValidNickname(System.String)">
             <summary>
             Checks if the passed nickname is valid according to the RFC
            
             Use with caution, many IRC servers are not conform with this!
             </summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Pass(System.String)">
            <summary>Pass message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Nick(System.String)">
            <summary>Nick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.User(System.String,System.Int32,System.String)">
            <summary>User message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Oper(System.String,System.String)">
            <summary>Oper message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Privmsg(System.String,System.String)">
            <summary>Privmsg message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Notice(System.String,System.String)">
            <summary>Notice message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Join(System.String)">
            <summary>Join message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Join(System.String[])">
            <summary>Join message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Join(System.String,System.String)">
            <summary>Join message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Join(System.String[],System.String[])">
            <summary>Join message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Part(System.String)">
            <summary>Part message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Part(System.String[])">
            <summary>Part message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Part(System.String,System.String)">
            <summary>Part message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Part(System.String[],System.String)">
            <summary>Part message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String,System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String,System.String,System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String[],System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String[],System.String,System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String,System.String[])">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String,System.String[],System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String[],System.String[])">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kick(System.String[],System.String[],System.String)">
            <summary>Kick message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Motd">
            <summary>Motd message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Motd(System.String)">
            <summary>Motd message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Luser">
            <summary>Luser message</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Lusers">
            <summary>Luser message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Luser(System.String)">
            <summary>Luser message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Lusers(System.String)">
            <summary>Luser message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Luser(System.String,System.String)">
            <summary>Luser message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Lusers(System.String,System.String)">
            <summary>Lusers</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Version">
            <summary>Version message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Version(System.String)">
            <summary>Version message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Stats">
            <summary>Stats message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Stats(System.String)">
            <summary>Stats message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Stats(System.String,System.String)">
            <summary>Stats message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Links">
            <summary>Links message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Links(System.String)">
            <summary>Links message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Links(System.String,System.String)">
            <summary>Links message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Time">
            <summary>Time message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Time(System.String)">
            <summary>Time message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Connect(System.String,System.String)">
            <summary>Connect message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Connect(System.String,System.String,System.String)">
            <summary>Connect message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Trace">
            <summary>Trace message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Trace(System.String)">
            <summary>Trace message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Admin">
            <summary>Admin message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Admin(System.String)">
            <summary>Admin message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Info">
            <summary>Info message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Info(System.String)">
            <summary>Info message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Servlist">
            <summary>Servlist message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Servlist(System.String)">
            <summary>Servlist message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Servlist(System.String,System.String)">
            <summary>Servlist message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Squery(System.String,System.String)">
            <summary>Squery message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.List">
            <summary>List message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.List(System.String)">
            <summary>List message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.List(System.String[])">
            <summary>List message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.List(System.String,System.String)">
            <summary>List message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.List(System.String[],System.String)">
            <summary>List message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Names">
            <summary>Names message</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Names(System.String)">
            <summary>Names message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Names(System.String[])">
            <summary>Names message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Names(System.String,System.String)">
            <summary>Names message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Names(System.String[],System.String)">
            <summary>Names message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Topic(System.String)">
            <summary>Topic message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Topic(System.String,System.String)">
            <summary>Topic message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Mode(System.String)">
            <summary>Mode message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Mode(System.String,System.String)">
            <summary>Mode message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Mode(System.String,System.String[],System.String[])">
            <summary>Mode message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Service(System.String,System.String,System.String)">
            <summary>Service message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Invite(System.String,System.String)">
            <summary>Invite message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Who">
            <summary>Who message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Who(System.String)">
            <summary>Who message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Who(System.String,System.Boolean)">
            <summary>Who message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whois(System.String)">
            <summary>Whois message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whois(System.String[])">
            <summary>Whois message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whois(System.String,System.String)">
            <summary>Whois message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whois(System.String,System.String[])">
            <summary>Whois message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String)">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String[])">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String,System.String)">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String[],System.String)">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String,System.String,System.String)">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Whowas(System.String[],System.String,System.String)">
            <summary>Whowas message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Kill(System.String,System.String)">
            <summary>Kill message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Ping(System.String)">
            <summary>Ping message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Ping(System.String,System.String)">
            <summary>Ping message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Pong(System.String)">
            <summary>Pong message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Pong(System.String,System.String)">
            <summary>Pong message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Error(System.String)">
            <summary>Error message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Away">
            <summary>Away message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Away(System.String)">
            <summary>Away message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Rehash">
            <summary>Rehash message</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Die">
            <summary>Die message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Restart">
            <summary>Restart message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Summon(System.String)">
            <summary>Summon message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Summon(System.String,System.String)">
            <summary>Summon message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Summon(System.String,System.String,System.String)">
            <summary>Summon message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Users">
            <summary>Users message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Users(System.String)">
            <summary>Users message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Wallops(System.String)">
            <summary>Wallops message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Userhost(System.String)">
            <summary>Userhost message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Userhost(System.String[])">
            <summary>Userhost message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Ison(System.String)">
            <summary>Ison message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Ison(System.String[])">
            <summary>Ison message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Quit">
            <summary>Quit message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Quit(System.String)">
            <summary>Quit message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.Squit(System.String,System.String)">
            <summary>Squit message.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.getReadType(System.String,System.String)">
            <summary>Function returning the type of message received from Twitch</summary>
            <param name="message"></param>
            <param name="channel"></param>
            <returns>Message type (ie NOTICE, PRIVMSG, JOIN, etc)</returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.getMsgId(System.String)">
            <summary>
            Extracts msg-id property from message.
            </summary>
            <param name="message"></param>
            <returns>Message id (ie host_on)</returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectConnected(System.String)">
            <summary>[Works] Parse function to detect connected successfully</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectNewSubscriber(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect new subscriber</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectMessageReceived(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new messages.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectCommandReceived(System.String,System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel},TwitchLib.Models.Client.MessageEmoteCollection,System.Boolean,System.Collections.Generic.HashSet{System.Char})">
            <summary>[Works] Parse function to detect new commands.</summary>
            <param name="botUsername"></param>
            <param name="message"></param>
            <param name="channels"></param>
            <param name="_channelEmotes"></param>
            <param name="WillReplaceEmotes"></param>
            <param name="_commandIdentifiers"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectUserJoined(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new viewers.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect leaving viewers.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeratorJoined(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new moderators.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeatorLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect leaving moderators.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedIncorrectLogin(System.String)">
            <summary>[Works] Parse function to detect failed login.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedMalformedOAuth(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect malformed oauth error.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect host leaving.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedChannelStateChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new channel state.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserStateChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new user states.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedReSubscriber(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect resubscriptions.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedPing(System.String)">
            <summary>[Works] Parse function to detect PING messages.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedPong(System.String)">
            <summary>[Works] Parse function to detect PONG messages.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostingStopped(System.String)">
            <summary>Parse function to detect stopped hosting.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostingStarted(System.String)">
            <summary>[Works] Parse function to detect started hosting.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedExistingUsers(System.String,System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect existing user messages.</summary>
            <param name="message"></param>
            <param name="username"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedClearedChat(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect clearchat.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserTimedout(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect a viewer was timedout.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserBanned(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect viewer was banned.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeratorsReceived(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect list of moderators was received.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedChatColorChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>
            Parse function to detect chat color being changed successfully
            </summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedNowHosting(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>
            Parse function to detect now hosting event.
            </summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedJoinChannelCompleted(System.String)">
            <summary>
            Parse function to detect that a 366 has been received indicating completed joining channel
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Internal.Parsing.Whisper">
            <summary>Static class used for detecting whisper commands and messages.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Whisper.detectedWhisperReceived(System.String,System.String)">
            <summary>Function used to detect if a whisper was received or not.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Whisper.detectedWhisperCommandReceived(System.String,System.String,System.Collections.Generic.HashSet{System.Char})">
            <summary>Function used to detect if a whisper command was received or not.</summary>
        </member>
        <member name="T:TwitchLib.Common.Helpers">
            <summary>Static class of helper functions used around the project.</summary>
        </member>
        <member name="M:TwitchLib.Common.Helpers.FormatOAuth(System.String)">
            <summary>
            Function that extracts just the token for consistency
            </summary>
            <param name="token">Full token string</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.ImageToBase64(System.Drawing.Image)">
            <summary>
            Function that converts Image object to a base64 string.
            </summary>
            <param name="image">Image object represting the image to turn to base64 string.</param>
            <returns>Base64 string of image.</returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.JsonIsNullOrEmpty(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Function to check if a jtoken is null.
            Credits: http://stackoverflow.com/questions/24066400/checking-for-empty-null-jtoken-in-a-jobject
            </summary>
            <param name="token">JToken to check if null or not.</param>
            <returns>Boolean on whether true or not.</returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.DateTimeStringToObject(System.String)">
            <summary>Takes date time string received from Twitch API and converts it to DateTime object.</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.ParseQuotesAndNonQuotes(System.String)">
            <summary>
            Parses out strings that have quotes, ideal for commands that use quotes for parameters
            </summary>
            <param name="message">Input string to attempt to parse.</param>
            <returns>List of contents of quotes from the input string</returns>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.Create(System.Type,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.Create(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.TwitchLib#Logging#ILoggerFactory#Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.TwitchLib#Logging#ILoggerFactory#Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.TwitchLib#Logging#ILoggerFactory#Create(System.Type,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.TwitchLib#Logging#ILoggerFactory#Create(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.AbstractExtendedLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Logging.AbstractLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Logging.ConsoleLogger">
            <summary>
            The Logger sending everything to the standard output streams.
            This is mainly for the cases when you have a utility that
            does not have a logger to supply.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.#ctor">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c> and the <c>Name</c>
              set to <c>string.Empty</c>.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.#ctor(TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger with the <c>Name</c>
              set to <c>string.Empty</c>.
            </summary>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c>.
            </summary>
            <param name = "name">The logs Name.</param>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.#ctor(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger.
            </summary>
            <param name = "name">The logs Name.</param>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.Log(TwitchLib.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              A Common method to log.
            </summary>
            <param name = "loggerLevel">The level of logging</param>
            <param name = "loggerName">The name of the logger</param>
            <param name = "message">The Message</param>
            <param name = "exception">The Exception</param>
        </member>
        <member name="M:TwitchLib.Logging.ConsoleLogger.CreateChildLogger(System.String)">
            <summary>
              Returns a new <c>ConsoleLogger</c> with the name
              added after this loggers name, with a dot in between.
            </summary>
            <param name = "loggerName">The added hierarchical name.</param>
            <returns>A new <c>ConsoleLogger</c>.</returns>
        </member>
        <member name="T:TwitchLib.Logging.IContextProperties">
            <summary>
              Interface for Context Properties implementations
            </summary>
            <remarks>
              <para>
                This interface defines a basic property get set accessor.
              </para>
              <para>
                Based on the ContextPropertiesBase of log4net, by Nicko Cadell.
              </para>
            </remarks>
        </member>
        <member name="P:TwitchLib.Logging.IContextProperties.Item(System.String)">
            <summary>
              Gets or sets the value of a property
            </summary>
            <value>
              The value for the property with the specified key
            </value>
            <remarks>
              <para>
                Gets or sets the value of a property
              </para>
            </remarks>
        </member>
        <member name="T:TwitchLib.Logging.IExtendedLogger">
            <summary>
              Provides an interface that supports <see cref = "T:TwitchLib.Logging.ILogger" /> and
              allows the storage and retrieval of Contexts. These are supported in
              both log4net and NLog.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.IExtendedLogger.GlobalProperties">
            <summary>
              Exposes the Global Context of the extended logger.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.IExtendedLogger.ThreadProperties">
            <summary>
              Exposes the Thread Context of the extended logger.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.IExtendedLogger.ThreadStacks">
            <summary>
              Exposes the Thread Stack of the extended logger.
            </summary>
        </member>
        <member name="T:TwitchLib.Logging.IExtendedLoggerFactory">
            <summary>
              Provides a factory that can produce either <see cref = "T:TwitchLib.Logging.ILogger" /> or
              <see cref = "T:TwitchLib.Logging.IExtendedLogger" /> classes.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.IExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.IExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.IExtendedLoggerFactory.Create(System.Type,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.IExtendedLoggerFactory.Create(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="T:TwitchLib.Logging.ILogger">
            <summary>
              Manages logging.
            </summary>
            <remarks>
              This is a facade for the different logging subsystems.
              It offers a simplified interface that follows IOC patterns
              and a simplified priority/level/severity abstraction.
            </remarks>
        </member>
        <member name="P:TwitchLib.Logging.ILogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value>True if "debug" messages will be logged.</value>
        </member>
        <member name="P:TwitchLib.Logging.ILogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value>True if "error" messages will be logged.</value>
        </member>
        <member name="P:TwitchLib.Logging.ILogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value>True if "fatal" messages will be logged.</value>
        </member>
        <member name="P:TwitchLib.Logging.ILogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value>True if "info" messages will be logged.</value>
        </member>
        <member name="P:TwitchLib.Logging.ILogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value>True if "warn" messages will be logged.</value>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.CreateChildLogger(System.String)">
            <summary>
              Create a new child logger.
              The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name = "loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns>
            <exception cref = "T:System.ArgumentException">If the name has an empty element name.</exception>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Debug(System.Func{System.String})">
            <summary>
              Logs a debug message with lazily constructed message. The message will be constructed only if the <see cref = "P:TwitchLib.Logging.ILogger.IsDebugEnabled" /> is true.
            </summary>
            <param name = "messageFactory"></param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Error(System.Func{System.String})">
            <summary>
              Logs an error message with lazily constructed message. The message will be constructed only if the <see cref = "P:TwitchLib.Logging.ILogger.IsErrorEnabled" /> is true.
            </summary>
            <param name = "messageFactory"></param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Fatal(System.Func{System.String})">
            <summary>
              Logs a fatal message with lazily constructed message. The message will be constructed only if the <see cref = "P:TwitchLib.Logging.ILogger.IsFatalEnabled" /> is true.
            </summary>
            <param name = "messageFactory"></param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Info(System.Func{System.String})">
            <summary>
              Logs a info message with lazily constructed message. The message will be constructed only if the <see cref = "P:TwitchLib.Logging.ILogger.IsInfoEnabled" /> is true.
            </summary>
            <param name = "messageFactory"></param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Warn(System.Func{System.String})">
            <summary>
              Logs a warn message with lazily constructed message. The message will be constructed only if the <see cref = "P:TwitchLib.Logging.ILogger.IsWarnEnabled" /> is true.
            </summary>
            <param name = "messageFactory"></param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.ILogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="T:TwitchLib.Logging.ILoggerFactory">
            <summary>
              Manages the instantiation of <see cref = "T:TwitchLib.Logging.ILogger" />s.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ILoggerFactory.Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ILoggerFactory.Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ILoggerFactory.Create(System.Type,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.ILoggerFactory.Create(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="T:TwitchLib.Logging.LevelFilteredLogger">
            <summary>
            The Level Filtered Logger class.  This is a base clase which
            provides a LogLevel attribute and reroutes all functions into
            one Log method.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.#ctor">
            <summary>
              Creates a new <c>LevelFilteredLogger</c>.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.Level">
            <value>
              The <c>LoggerLevel</c> that this logger
              will be using. Defaults to <c>LoggerLevel.Off</c>
            </value>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.Name">
            <value>
              The name that this logger will be using. 
              Defaults to <c>string.Empty</c>
            </value>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref = "F:TwitchLib.Logging.LoggerLevel.Debug" /> bit</value>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref = "F:TwitchLib.Logging.LoggerLevel.Info" /> bit</value>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref = "F:TwitchLib.Logging.LoggerLevel.Warn" /> bit</value>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref = "F:TwitchLib.Logging.LoggerLevel.Error" /> bit</value>
        </member>
        <member name="P:TwitchLib.Logging.LevelFilteredLogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref = "F:TwitchLib.Logging.LoggerLevel.Fatal" /> bit</value>
        </member>
        <member name="M:TwitchLib.Logging.LevelFilteredLogger.Log(TwitchLib.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              Implementors output the log content by implementing this method only.
              Note that exception can be null
            </summary>
            <param name = "loggerLevel"></param>
            <param name = "loggerName"></param>
            <param name = "message"></param>
            <param name = "exception"></param>
        </member>
        <member name="T:TwitchLib.Logging.LoggerLevel">
            <summary>
              Supporting Logger levels.
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Off">
            <summary>
              Logging will be off
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Fatal">
            <summary>
              Fatal logging level
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Error">
            <summary>
              Error logging level
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Warn">
            <summary>
              Warn logging level
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Info">
            <summary>
              Info logging level
            </summary>
        </member>
        <member name="F:TwitchLib.Logging.LoggerLevel.Debug">
            <summary>
              Debug logging level
            </summary>
        </member>
        <member name="T:TwitchLib.Logging.NullLogFactory">
            <summary>
            NullLogFactory used when logging is turned off.
            </summary>
        </member>
        <member name="M:TwitchLib.Logging.NullLogFactory.Create(System.String)">
            <summary>
              Creates an instance of ILogger with the specified name.
            </summary>
            <param name = "name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Logging.NullLogFactory.Create(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
              Creates an instance of ILogger with the specified name and LoggerLevel.
            </summary>
            <param name = "name">Name.</param>
            <param name = "level">Level.</param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Logging.NullLogger">
            <summary>
              The Null Logger class.  This is useful for implementations where you need
              to provide a logger to a utility class, but do not want any output from it.
              It also helps when you have a utility that does not have a logger to supply.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.GlobalProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.ThreadProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.ThreadStacks">
            <summary>
              Returns empty context stacks.
            </summary>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.IsDebugEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.IsErrorEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.IsFatalEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.IsInfoEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:TwitchLib.Logging.NullLogger.IsWarnEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.CreateChildLogger(System.String)">
            <summary>
              Returns this <c>NullLogger</c>.
            </summary>
            <param name = "loggerName">Ignored</param>
            <returns>This ILogger instance.</returns>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Debug(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Error(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Fatal(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Info(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Info(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Warn(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.Warn(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:TwitchLib.Logging.NullLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="T:TwitchLib.Logging.StreamLogger">
            <summary>
            The Stream Logger class.  This class can stream log information
            to any stream, it is suitable for storing a log file to disk,
            or to a <c>MemoryStream</c> for testing your components.
            </summary>
            <remarks>
            This logger is not thread safe.
            </remarks>
        </member>
        <member name="M:TwitchLib.Logging.StreamLogger.#ctor(System.String,System.IO.Stream)">
            <summary>
              Creates a new <c>StreamLogger</c> with default encoding 
              and buffer size. Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
        </member>
        <member name="M:TwitchLib.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
              Creates a new <c>StreamLogger</c> with default buffer size.
              Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name = "encoding">
              The encoding that will be used for this stream.
              <see cref = "T:System.IO.StreamWriter" />
            </param>
        </member>
        <member name="M:TwitchLib.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
              Creates a new <c>StreamLogger</c>. 
              Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name = "encoding">
              The encoding that will be used for this stream.
              <see cref = "T:System.IO.StreamWriter" />
            </param>
            <param name = "bufferSize">
              The buffer size that will be used for this stream.
              <see cref = "T:System.IO.StreamWriter" />
            </param>
        </member>
        <member name="M:TwitchLib.Logging.StreamLogger.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
              Creates a new <c>StreamLogger</c> with 
              Debug as default Level.
            </summary>
            <param name = "name">The name of the log.</param>
            <param name = "writer">The <c>StreamWriter</c> the log will write to.</param>
        </member>
        <member name="T:TwitchLib.Logging.StreamLoggerFactory">
            <summary>
              Creates <see cref = "T:TwitchLib.Logging.StreamLogger" /> outputing 
              to files. The name of the file is derived from the log name
              plus the 'log' extension.
            </summary>
        </member>
        <member name="T:TwitchLib.Logging.TraceLogger">
            <summary>
              The TraceLogger sends all logging to the System.Diagnostics.TraceSource
              built into the .net framework.
            </summary>
            <remarks>
              Logging can be configured in the system.diagnostics configuration 
              section. 
            
              If logger doesn't find a source name with a full match it will
              use source names which match the namespace partially. 
            
              If no portion of the namespace matches the source named "Default" will
              be used.
            </remarks>
        </member>
        <member name="M:TwitchLib.Logging.TraceLogger.#ctor(System.String)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
        </member>
        <member name="M:TwitchLib.Logging.TraceLogger.#ctor(System.String,TwitchLib.Logging.LoggerLevel)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
            <param name="level">The default logging level at which this source should write messages. In almost all cases this
            default value will be overridden in the config file. </param>
        </member>
        <member name="M:TwitchLib.Logging.TraceLogger.CreateChildLogger(System.String)">
            <summary>
            Create a new child logger.
            The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns> 
        </member>
        <member name="T:TwitchLib.Logging.TraceLoggerFactory">
            <summary>
              Used to create the TraceLogger implementation of ILogger interface. See <see cref = "T:TwitchLib.Logging.TraceLogger" />.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Id">
            <summary>Property representing the community ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.AvatarImageUrl">
            <summary>Property representing the community avatar image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.CoverImageUrl">
            <summary>Property representing the community cover image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Description">
            <summary>Property representing the community description.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.DescriptionHtml">
            <summary>Property representing the community description in html format.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Language">
            <summary>Property representing the community language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Name">
            <summary>Property representing the community name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.OwnerId">
            <summary>Property representing the userId of the community owner.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Rules">
            <summary>Property representing the community rules.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.RulesHtml">
            <summary>Property representing the community rules in html format.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Communities.Community.Summary">
            <summary>Property representing the community summary.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.Channel">
            <summary>Class representing a channel object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Id">
            <summary>Property representing the channel ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.BroadcasterLanguage">
            <summary>Property representing the broadcasters language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.CreatedAt">
            <summary>Property representing the date time of channel creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.DisplayName">
            <summary>Property representing the case sensitive display name of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Followers">
            <summary>Property representing the followers count of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.BroadcasterType">
            <summary>Property representing broadcaster type. Can be partner, affiliate or ''</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Game">
            <summary>Property representing the currently played game.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Language">
            <summary>Property representing the signed language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Logo">
            <summary>Property representing the logo of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Mature">
            <summary>Property representing wether the channel is for mature audience or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Name">
            <summary>Property representing the name of the channel (always in lowercase).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Partner">
            <summary>Property representing wether the channel is partnered or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.ProfileBanner">
            <summary>Property representing the profile banner of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.ProfileBannerBackgroundColor">
            <summary>Property representing the profile banner background color of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Status">
            <summary>Property representing the status of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.UpdatedAt">
            <summary>Property representing the date time of last channel update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Url">
            <summary>Property representing the url to the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.VideoBanner">
            <summary>Property representing the video banner of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.Channel.Views">
            <summary>Property representing the number of views the channel has.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelCommercial">
            <summary>Class representing a commercial object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelCommercial.Duration">
            <summary>Property representing the duration of the commercial.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelCommercial.Message">
            <summary>Property representing the commercial message.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelCommercial.RetryAfter">
            <summary>Property representing the retryafter response.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelEditors">
            <summary>Class representing an array of Users able to edit the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelEditors.Editors">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelFollowers">
            <summary>Class representing the Channel Followers response from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollowers.Cursor">
            <summary>Property representing the cursor.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollowers.Total">
            <summary>Property representing the total amount of followers.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollowers.Follows">
            <summary>Property representing the Follow collection.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelAuthed">
            <summary>
            Class representing a privileged channel object from Twitch API.
            This class contains more data than the Channel class because the channel object is based on a specified oauth token.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Id">
            <summary>Property representing the channel ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.BroadcasterLanguage">
            <summary>Property representing the broadcasters language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.CreatedAt">
            <summary>Property representing the date time of channel creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.DisplayName">
            <summary>Property representing the case sensitive display name of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Email">
            <summary>Property representing the registration email address of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Followers">
            <summary>Property representing the followers count of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Game">
            <summary>Property representing the currently played game.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Language">
            <summary>Property representing the signed language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Logo">
            <summary>Property representing the logo of the channel</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Mature">
            <summary>Property representing wether the channel is for mature audience or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Name">
            <summary>Property representing the name of the channel (always in lowercase).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Partner">
            <summary>Property representing wether the channel is partnered or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.ProfileBanner">
            <summary>Property representing the profile banner of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.ProfileBannerBackgroundColor">
            <summary>Property representing the profile banner background color of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Status">
            <summary>Property representing the status of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.StreamKey">
            <summary>Property representing the stream key of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.UpdatedAt">
            <summary>Property representing the date time of last channel update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Url">
            <summary>Property representing the url to the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.VideoBanner">
            <summary>Property representing the video banner of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelAuthed.Views">
            <summary>Property representing the number of views the channel has.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelSubscribers">
            <summary>Class representing the channel subscribers response from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelSubscribers.Total">
            <summary>Property representing the subscriber count of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelSubscribers.Subscriptions">
            <summary>Property representing the subscriptions collection of the channel.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelTeams">
            <summary>Class representing the teams response of a channel from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelTeams.Teams">
            <summary>Property representing the channel teams.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Channels.ChannelFollow">
            <summary>Class representing a follow object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollow.CreatedAt">
            <summary>Property representing the date time of follow creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollow.Notifications">
            <summary>Property representing wether notifications are activated or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Channels.ChannelFollow.User">
            <summary>Property representing the User that follows.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Chat.Badge">
            <summary>Class representing a Badge from Twitch chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.Badge.Alpha">
            <summary>Property representing the link to the alpha of the badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.Badge.Image">
            <summary>Property representing the link to the image of the badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.Badge.SVG">
            <summary>Property representing the link to the svg of the badge.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Chat.ChannelBadges">
            <summary>[deprecated] Class representing the channel badges response from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Admin">
            <summary>Property representing the admin badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Broadcaster">
            <summary>Property representing the broadcaster badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.GlobalMod">
            <summary>Property representing the global moderator badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Mod">
            <summary>Property representing the moderator badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Staff">
            <summary>Property representing the staff badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Subscriber">
            <summary>Property representing the subscriber badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Chat.ChannelBadges.Turbo">
            <summary>Property representing the turbo badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.Collection.Id">
            <summary>Property representing the Collection Id.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.Collection.Items">
            <summary>Property representing the Collection items.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.Id">
            <summary>Property representing the CollectionMetadata object Id.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.CreatedAt">
            <summary>Property representing the date time of Collection creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.ItemsCount">
            <summary>Property representing the count of items in the Collection.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.Owner">
            <summary>Property representing the owner of the collection.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.Thumbnails">
            <summary>Property representing the thumbnails of the collection.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.Title">
            <summary>Property representing the title of the collection.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.TotalDuration">
            <summary>Property representing the total duration of the collection in seconds.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.UpdatedAt">
            <summary>Property representing the date time of last collection update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Collections.CollectionMetadata.Views">
            <summary>Property representing the total views of the collection.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.Root.Token">
            <summary>Property representing token object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootAuthorization.CreatedAt">
            <summary>Property representing the date time of channel creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootAuthorization.Scopes">
            <summary>Property representing the scopes.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootAuthorization.UpdatedAt">
            <summary>Property representing the date time of last channel update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootToken.Auth">
            <summary>Property representing authorization object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootToken.ClientId">
            <summary>Property representing the Client ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootToken.UserId">
            <summary>Property representing the userId.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootToken.Username">
            <summary>Property representing the username.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Root.RootToken.Valid">
            <summary>Property representing if the auth token is valid.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.FollowedStreams.Total">
            <summary>Property representing the followed Streams count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.FollowedStreams.Streams">
            <summary>Property representing the followed Streams.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Id">
            <summary>Property representing the Stream ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.AverageFps">
            <summary>Property representing the average fps count of the stream.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Channel">
            <summary>Property representing the channel ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.CreatedAt">
            <summary>Property representing the date time of channel creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Delay">
            <summary>Property representing the Stream delay.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Game">
            <summary>Property representing the Stream game.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.IsPlaylist">
            <summary>Property representing wether the Stream is a Playlist or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.StreamType">
            <summary>Property representing the type of stream (live, watch_party, etc)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Preview">
            <summary>Property representing wether the Stream is a Playlist or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.VideoHeight">
            <summary>Property representing the Stream video height.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.Stream.Viewers">
            <summary>Property representing the Stream viewer count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.StreamPreview.Large">
            <summary>Property representing the large preview image of the stream.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.StreamPreview.Medium">
            <summary>Property representing the medium preview image of the stream.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.StreamPreview.Small">
            <summary>Property representing the small preview image of the stream.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Streams.StreamPreview.Template">
            <summary>Property representing the template preview image of the stream.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Subscriptions.Subscription">
            <summary>Class representing a subscription object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Subscriptions.Subscription.Id">
            <summary>Property representing the subscription ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Subscriptions.Subscription.CreatedAt">
            <summary>Property representing the date time of subscription creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Subscriptions.Subscription.User">
            <summary>Property representing the user that subscribed.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Teams.Team">
            <summary>Class representing a more detailed team object from Twitch API</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Id">
            <summary>Property representing the team ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Background">
            <summary>Property representing the background.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Banner">
            <summary>Property representing the banner.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.CreatedAt">
            <summary>Property representing the date time of team creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.DisplayName">
            <summary>Property representing the case sensitive display name of the team.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Info">
            <summary>Property representing the information of the team.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Logo">
            <summary>Property representing the logo of the team.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Name">
            <summary>Property representing the name of the team (always in lowercase).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.UpdatedAt">
            <summary>Property representing the date time of last team update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Teams.Team.Users">
            <summary>Property representing the users in the team.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.Users.User">
            <summary>Class representing a User object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.Id">
            <summary>Property representing the user ID.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.Bio">
            <summary>Property representing the bio.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.CreatedAt">
            <summary>Property representing the date time of user creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.DisplayName">
            <summary>Property representing the case sensitive display name of the user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.Logo">
            <summary>Property representing the logo of the channel</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.Name">
            <summary>Property representing the name of the user (always in lowercase).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.Type">
            <summary>Property representing the type of the user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.Users.User.UpdatedAt">
            <summary>Property representing the date time of last user update.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ChannelState">
            <summary>Class representing a channel state as received from Twitch chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.R9K">
            <summary>Property representing whether R9K is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.SubOnly">
            <summary>Property representing whether Sub Mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.SlowMode">
            <summary>Property representing whether Slow mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.EmoteOnly">
            <summary>Property representing whether EmoteOnly mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.BroadcasterLanguage">
            <summary>Property representing the current broadcaster language.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.Channel">
            <summary>Property representing the current channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.FollowersOnly">
            <summary>Property representing how long needed to be following to talk </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.RoomId">
            <summary>Twitch assignedc room id</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChannelState.#ctor(System.String)">
            <summary>ChannelState object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ChatCommand">
            <summary>Object representing a command received via Twitch chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ChatMessage">
            <summary>Property representing the chat message that the command came in.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.Command">
            <summary>Property representing the actual command (without the command prefix).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ArgumentsAsList">
            <summary>Property representing all arguments received in a List form.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ArgumentsAsString">
            <summary>Property representing all arguments received in a string form.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.CommandIdentifier">
            <summary>Property representing the command identifier (ie command prefix).</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChatCommand.#ctor(System.String,TwitchLib.Models.Client.ChatMessage)">
            <summary>ChatCommand constructor.</summary>
            <param name="ircString"></param>
            <param name="chatMessage"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.EmoteSet">
            <summary>Object representing emote set from a chat message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emotes">
            <summary>List containing all emotes in the message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.RawEmoteSetString">
            <summary>The raw emote set string obtained from Twitch, for legacy purposes.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.EmoteSet.#ctor(System.String,System.String)">
            <summary>Constructor for ChatEmoteSet object.</summary>
            <param name="emoteSetData"></param>
            <param name="message"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.EmoteSet.Emote">
            <summary>
            Object representing an emote in an EmoteSet in a chat message.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.Id">
            <summary>Twitch-assigned emote Id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.Name">
            <summary>The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.StartIndex">
            <summary>Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.EndIndex">
            <summary>Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.ImageUrl">
            <summary>URL to Twitch hosted emote image.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.EmoteSet.Emote.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Emote constructor.
            </summary>
            <param name="emoteId"></param>
            <param name="name"></param>
            <param name="emoteStartIndex"></param>
            <param name="emoteEndIndex"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.ChatMessage">
            <summary>Class represents ChatMessage in a Twitch channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.BotUsername">
            <summary>Twitch username of the bot that received the message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.UserId">
            <summary>Twitch-unique integer assigned on per account basis.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Username">
            <summary>Username of sender of chat message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.DisplayName">
            <summary>Case-sensitive username of sender of chat message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.ColorHex">
            <summary>Hex representation of username color in chat (THIS CAN BE NULL IF VIEWER HASN'T SET COLOR).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Color">
            <summary>Property representing HEX color as a System.Drawing.Color object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.EmoteSet">
            <summary>Emote Ids that exist in message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Message">
            <summary>Twitch chat message contents.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.UserType">
            <summary>User type can be viewer, moderator, global mod, admin, or staff</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Channel">
            <summary>Twitch channel message was sent from (useful for multi-channel bots).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsSubscriber">
            <summary>Channel specific subscriber status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.SubscribedMonthCount">
            <summary>Number of months a person has been subbed.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.RoomId">
            <summary>Unique identifier of chat room.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsTurbo">
            <summary>Twitch site-wide turbo status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsModerator">
            <summary>Channel specific moderator status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsMe">
            <summary>Chat message /me identifier flag.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsBroadcaster">
            <summary>Chat message from broadcaster identifier flag</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Noisy">
            <summary>Experimental property noisy determination by Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.RawIrcMessage">
            <summary>Raw IRC-style text received from Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.EmoteReplacedMessage">
            <summary>Text after emotes have been handled (if desired). Will be null if replaceEmotes is false.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Badges">
            <summary>List of key-value pair badges.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.CheerBadge">
            <summary>If a cheer badge exists, this property represents the raw value and color (more later). Can be null.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Bits">
            <summary>If viewer sent bits in their message, total amount will be here.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.BitsInDollars">
            <summary>Number of USD (United States Dollars) spent on bits.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChatMessage.#ctor(System.String,System.String,TwitchLib.Models.Client.MessageEmoteCollection@,System.Boolean)">
            <summary>Constructor for ChatMessage object.</summary>
            <param name="botUsername">The username of the bot that received the message.</param>
            <param name="ircString">The raw string received from Twitch to be processed.</param>
            <param name="emoteCollection">The <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection"/> to register new emotes on and, if desired, use for emote replacement.</param>
            <param name="replaceEmotes">Whether to replace emotes for this chat message. Defaults to false.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.ChatMessage.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,TwitchLib.Models.Client.EmoteSet,System.Boolean,System.Boolean,TwitchLib.Enums.UserType,System.String)">
            <summary>Chat Message constructor with passed in values.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.CheerBadge">
            <summary>Class representing cheer badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.CheerBadge.CheerAmount">
            <summary>Property representing raw cheer amount represented by badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.CheerBadge.Color">
            <summary>Property representing the color of badge via an enum.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.CheerBadge.#ctor(System.Int32)">
            <summary>Constructor for CheerBadge</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.DetectionReturn">
            <summary>Class representing a detection return object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.DetectionReturn.Successful">
            <summary>Property representing whether detection was successful.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.DetectionReturn.Channel">
            <summary>Property representing the detected channel, could be null.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.DetectionReturn.#ctor(System.Boolean,System.String)">
            <summary>DetectionReturn object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ErrorEvent">
            <summary>Class representing the error that the websocket encountered.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ErrorEvent.Message">
            <summary>Message pertaining to the error.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ErrorEvent.Exception">
            <summary>Exception object representing the error.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.JoinedChannel">
            <summary>Class representing a joined channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.ChannelState">
            <summary>Object representing current state of channel (r9k, slow, etc).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.Channel">
            <summary>The current channel the TwitcChatClient is connected to.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.PreviousMessage">
            <summary>The most recent message received.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.JoinedChannel.#ctor(System.String)">
            <summary>JoinedChannel object constructor.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.JoinedChannel.HandleMessage(TwitchLib.Models.Client.ChatMessage)">
            <summary>Handles a message</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote">
            <summary>Class for maintaining emotes that may be substituted into messages.</summary>
            <remarks>
                Also contains helpers to aid in performing actual replacements.
                Expected to be called from the context of <see cref="T:TwitchLib.Models.Client.ChatMessage"/> and <see cref="T:TwitchLib.Models.Client.WhisperMessage"/>.
            </remarks>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate">
            <summary>
                Delegate allowing Emotes to handle their replacement text on a case-by-case basis.
            </summary>
            <returns>The string for the calling emote to be replaced with.</returns>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.TwitchEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute an
                emote ID to get a URL for an image from the Twitch CDN
            </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg TwitchEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
            </remarks>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.FrankerFaceZEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute an
                emote ID to get a URL for an image from the FFZ CDN
            </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg FrankerFaceZEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
                WARNING: FrankerFaceZ does not require users to submit all sizes,
                so using something other than Small images may result in broken links!
            </remarks>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.BetterTwitchTvEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute
                an emote ID to get a URL for an image from the BTTV CDN
                </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg BetterTwitchTvEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
            </remarks>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmote.SourceMatchingReplacementText(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                A delegate which attempts to match the calling <see cref="T:TwitchLib.Models.Client.MessageEmote"/> with its
                <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> and pulls the <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small">small</see> version
                of the URL.
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.EmoteSource">
            <summary> Enum supplying the supported sites which provide Emote images.</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch">
            <summary>Emotes hosted by Twitch.tv natively</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.FrankerFaceZ">
            <summary>Emotes hosted by FrankerFaceZ.com</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.BetterTwitchTv">
            <summary>Emotes hosted by BetterTTV.net</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.EmoteSize">
            <summary> Enum denoting the emote sizes</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small">
            <summary>
                Best support
                Small-sized emotes are the standard size used in the Twitch web chat.
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Medium">
            <summary>
                Medium-sized emotes are not supported by all browsers, and
                FrankerFaceZ does not require emotes to be submitted in this size
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Large">
            <summary>
                Large-sized emotes are not supported by all browsers, and
                FrankerFaceZ does not require emotes to be submitted in this size
                </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Id">
            <summary>
                Emote ID as used by the emote source. Will be provided as {0}
                to be substituted into the indicated URL if needed.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Text">
            <summary>
                Emote text which appears in a message and is meant to be replaced by the emote image.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Source">
            <summary>
                The specified <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> for this emote.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Size">
            <summary>
                The specified <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> for this emote.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.ReplacementString">
            <summary>
               The string to substitute emote text for.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.ReplacementDelegate">
            <summary>
                The desired <see cref="T:TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate"/> to use for replacing text in a given emote.
                Default: <see cref="M:TwitchLib.Models.Client.MessageEmote.SourceMatchingReplacementText(TwitchLib.Models.Client.MessageEmote)"/>
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.EscapedText">
            <summary>
                The emote text <see cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)">regex-escaped</see>
                so that it can be embedded into a regex pattern.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmote.#ctor(System.String,System.String,TwitchLib.Models.Client.MessageEmote.EmoteSource,TwitchLib.Models.Client.MessageEmote.EmoteSize,TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate)">
            <summary>
                Constructor for a new MessageEmote instance.
            </summary>
            <param name="id">
                The unique identifier which the emote provider uses to generate CDN URLs.
            </param>
            <param name="text">
                The string which users type to create this emote in chat.
            </param>
            <param name="source">
                An <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> where an image can be found for this emote.
                Default: <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch"/>
            </param>
            <param name="size">
                An <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> to pull for this image.
                Default: <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>
            </param>
            <param name="replacementDelegate">
                A string (optionally Composite Format with "{0}" representing
                <paramref name="id"/>) which will be used instead of any of the emote URLs.
                Default: null
            </param>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmoteCollection">
            <summary>
                Helper class which maintains a collection of all emotes active for a given channel.
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmoteCollection._currentPattern">
            <summary> Do not access directly! Backing field for <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern"/> </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern">
            <summary>
                Property so that we can be confident <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.PatternChanged"/>
                always reflects changes to <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern"/>.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.#ctor">
            <summary>
                Default, empty constructor initializes the list and sets the preferred
                <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> to <see cref="M:TwitchLib.Models.Client.MessageEmoteCollection.AllInclusiveEmoteFilter(TwitchLib.Models.Client.MessageEmote)"/>
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.#ctor(TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate)">
            <summary>
                Constructor which specifies a particular preferred <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/>
            </summary>
            <param name="preferredFilter"></param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Add(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                Adds an <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to the collection. Duplicate emotes
                (judged by <see cref="P:TwitchLib.Models.Client.MessageEmote.Text"/>) are ignored.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to add to the collection.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Merge(System.Collections.Generic.IEnumerable{TwitchLib.Models.Client.MessageEmote})">
            <summary>
                Adds every <see cref="T:TwitchLib.Models.Client.MessageEmote"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1">enumerable</see>
                collection to the internal collection.
                Duplicate emotes (judged by <see cref="P:TwitchLib.Models.Client.MessageEmote.Text"/>) are ignored.
            </summary>
            <param name="emotes">A collection of <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Remove(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                Removes the specified <see cref="T:TwitchLib.Models.Client.MessageEmote"/> from the collection.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to remove.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.RemoveAll">
            <summary>
                Removes all <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s from the collection.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.ReplaceEmotes(System.String,TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate)">
            <summary>
                Replaces all instances of all registered emotes passing the provided
                <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> with their designated
                <see cref="P:TwitchLib.Models.Client.MessageEmote.ReplacementString"/>s
            </summary>
            <param name="originalMessage">
                The original message which needs to be processed for emotes.
            </param>
            <param name="del">
                An <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> which returns true if its
                received <see cref="T:TwitchLib.Models.Client.MessageEmote"/> is to be replaced.
                Defaults to <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentEmoteFilter"/>.
            </param>
            <returns>
                A string where all of the original emote text has been replaced with
                its designated <see cref="P:TwitchLib.Models.Client.MessageEmote.ReplacementString"/>s
            </returns>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate">
            <summary>
                A delegate function which, when given a <see cref="T:TwitchLib.Models.Client.MessageEmote"/>,
                determines whether it should be replaced.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to be considered</param>
            <returns>true if the <see cref="T:TwitchLib.Models.Client.MessageEmote"/> should be replaced.</returns>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.AllInclusiveEmoteFilter(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                The default emote filter includes every <see cref="T:TwitchLib.Models.Client.MessageEmote"/> registered on this list.
            </summary>
            <param name="emote">An emote which is ignored in this filter.</param>
            <returns>true always</returns>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.TwitchOnlyEmoteFilter(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                This emote filter includes only <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s provided by Twitch.
            </summary>
            <param name="emote">
                A <see cref="T:TwitchLib.Models.Client.MessageEmote"/> which will be replaced if its
                <see cref="P:TwitchLib.Models.Client.MessageEmote.Source">Source</see> is <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch"/>
            </param>
            <returns>true always</returns>
        </member>
        <member name="T:TwitchLib.Models.Client.Subscriber">
            <summary>Class representing a resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Badges">
            <summary>Property representing list of badges assigned.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.ColorHex">
            <summary>Property representing the colorhex of the resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Color">
            <summary>Property representing HEX color as a System.Drawing.Color object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.DisplayName">
            <summary>Property representing resubscriber's customized display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.EmoteSet">
            <summary>Property representing emote set of resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Id">
            <summary>Property representing resub message id</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Login">
            <summary>Property representing login of resubscription event.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.SystemMessage">
            <summary>Property representing internval system message value.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.SystemMessageParsed">
            <summary>Property representing internal system message value, parsed.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.ResubMessage">
            <summary>Property representing system message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.SubscriptionPlan">
            <summary>Property representing the plan a user is on.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.SubscriptionPlanName">
            <summary>Property representing the subscription plan name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Months">
            <summary>Property representing number of months of being subscribed.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.RoomId">
            <summary>Property representing the room id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.UserId">
            <summary>Property representing the user's id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.IsModerator">
            <summary>Property representing whether or not the resubscriber is a moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.IsTurbo">
            <summary>Property representing whether or not the resubscriber is a turbo member.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.IsSubscriber">
            <summary>Property representing whether or not the resubscriber is a subscriber (YES).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.IsPartner">
            <summary>Property representing whether or not person is a partner.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.TmiSentTs">
            <summary>Property representing the tmi-sent-ts value.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.UserType">
            <summary>Property representing the user type of the resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.RawIrc">
            <summary>Property representing the raw IRC message (for debugging/customized parsing)</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.Channel">
            <summary>Property representing the channel the resubscription happened in.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.Subscriber.IsTwitchPrime">
            <summary>[DEPRECATED, USE SUBSCRIPTIONPLAN PROPERTY] Property representing if the resubscription came from Twitch Prime.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.Subscriber.#ctor(System.String)">
            <summary>Subscriber object constructor.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.Subscriber.ToString">
            <summary>Overriden ToString method, prints out all properties related to resub.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ConnectionCredentials">
            <summary>Class used to store credentials used to connect to Twitch chat/whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchUsername">
            <summary>Property representing bot's username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchOAuth">
            <summary>Property representing bot's oauth.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchHost">
            <summary>Property representing Twitch's host address</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchPort">
            <summary>Property representing Twitch's host port</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ConnectionCredentials.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>Constructor for ConnectionCredentials object.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.SentMessage">
            <summary>Model representing a sent message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.Badges">
            <summary>Badges the sender has</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.Channel">
            <summary>Channel the sent message was sent from.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.ColorHex">
            <summary>Sender's name color.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.DisplayName">
            <summary>Display name of the sender.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.EmoteSet">
            <summary>Emotes that appear in the sent message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.IsModerator">
            <summary>Whether or not the sender is a moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.IsSubscriber">
            <summary>Whether or not the sender is a subscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.UserType">
            <summary>The type of user (admin, broadcaster, viewer, moderator)</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.SentMessage.Message">
            <summary>The message contents.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.SentMessage.#ctor(TwitchLib.Models.Client.UserState,System.String)">
            <summary>Model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.UserState">
            <summary>Class representing state of a specific user.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Badges">
            <summary>Properrty representing the chat badges a specific user has.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.ColorHex">
            <summary>Properrty representing HEX user's name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.DisplayName">
            <summary>Property representing user's display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.EmoteSet">
            <summary>Property representing emote sets available to user.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Channel">
            <summary>Property representing channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Subscriber">
            <summary>Property representing subscriber status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Moderator">
            <summary>Property representing Turbo status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.UserType">
            <summary>Property representing returned user type of user.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.UserState.#ctor(System.String)">
            <summary>
            Constructor for UserState.
            </summary>
            <param name="ircString"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.WhisperMessage">
            <summary>Class representing a received whisper from TwitchWhisperClient</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Badges">
            <summary>Property representing dynamic badges assigned to message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.ColorHex">
            <summary>Property representing HEX representation of color of username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Color">
            <summary>Property representing HEX color as a System.Drawing.Color object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Username">
            <summary>Property representing sender Username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.DisplayName">
            <summary>Property representing sender DisplayName (can be null/blank).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.EmoteSet">
            <summary>Property representing list of string emotes in message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.ThreadId">
            <summary>Property representing identifier of the message thread.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.MessageId">
            <summary>Property representing message identifier.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.UserId">
            <summary>Property representing sender identifier.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Turbo">
            <summary>Property representing whether or not sender has Turbo.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.BotUsername">
            <summary>Property representing bot's username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Message">
            <summary>Property representing message contents.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.UserType">
            <summary>Property representing user type of sender.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.WhisperMessage.#ctor(System.String,System.String)">
            <summary>
            WhisperMessage constructor.
            </summary>
            <param name="ircString">Received IRC string from Twitch server.</param>
            <param name="botUsername">Active bot username receiving message.</param>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents">
            <summary>Model representing the data in a channel bits event.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.Username">
            <summary>Username of the sender.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.ChannelName">
            <summary>The channel the bits were sent to.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.UserId">
            <summary>User ID of the sender.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.ChannelId">
            <summary>Channel/User ID of where the bits were sent to.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.Time">
            <summary>Time stamp of the event.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.ChatMessage">
            <summary>Chat message that accompanied the bits.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.BitsUsed">
            <summary>The amount of bits sent.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.TotalBitsUsed">
            <summary>The total amount of bits the user has sent.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.Context">
            <summary>Context related to event.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.ChannelBitsEvents.#ctor(System.String)">
            <summary>ChannelBitsEvent model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions">
            <summary>ChatModeratorActions model.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions.Type">
            <summary>Topic relevant to this messagedata type.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions.ModerationAction">
            <summary>The specific moderation action.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions.Args">
            <summary>Arguments provided in moderation action.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions.CreatedBy">
            <summary>Moderator that performed action.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.ChatModeratorActions.#ctor(System.String)">
            <summary>ChatModeratorActions model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.MessageData">
            <summary>Class representing message data.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.ChannelSubscription">
            <summary>ChatModeratorActions model.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.ChannelSubscription.#ctor(System.String)">
            <summary>ChatModeratorActions model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback">
            <summary>VideoPlayback model constructor.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback.Type">
            <summary>Video playback type</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback.ServerTime">
            <summary>Server time stamp</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback.PlayDelay">
            <summary>Current delay (if one exists)</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback.Viewers">
            <summary>Viewer count</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.VideoPlayback.#ctor(System.String)">
            <summary>VideoPlayback constructor.</summary>
            <param name="jsonStr"></param>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper">
            <summary>Class representing a whisper received via PubSub.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.Type">
            <summary>Type of MessageData</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.Data">
            <summary>Data identifier in MessageData</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObject">
            <summary>Object that houses the data accompanying the type.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.#ctor(System.String)">
            <summary>Whisper object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj">
            <summary>Class representing the data in the MessageData object.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Id">
            <summary>DataObject identifier</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.ThreadId">
            <summary>Twitch assigned thread id</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Body">
            <summary>Body of data received from Twitch</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.SentTs">
            <summary>Timestamp generated by Twitc</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.FromId">
            <summary>Id of user that sent whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Tags">
            <summary>Tags object housing associated tags.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Recipient">
            <summary>Receipient object housing various properties about user who received whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Nonce">
            <summary>Uniquely generated string used to identify response from request.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>DataObj constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj">
            <summary>Class representing the tags associated with the whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Login">
            <summary>Login value associated.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.DisplayName">
            <summary>Display name found in chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Color">
            <summary>Color of whispers</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.UserType">
            <summary>User type of whisperer</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Turbo">
            <summary>True or false for whether whisperer is turbo</summary>
        </member>
        <member name="F:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Emotes">
            <summary>List of emotes found in whisper</summary>
        </member>
        <member name="F:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Badges">
            <summary>All badges associated with the whisperer</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj">
            <summary>Class representing a single emote found in a whisper</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.Id">
            <summary>Emote ID</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.Start">
            <summary>Starting character of emote</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.End">
            <summary>Ending character of emote</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>EmoteObj construcotr.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj">
            <summary>Class representing the recipient of the whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Id">
            <summary>Receiver id</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Username">
            <summary>Receiver username</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.DisplayName">
            <summary>Receiver display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Color">
            <summary>Receiver color.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.UserType">
            <summary>User type of receiver.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Turbo">
            <summary>True or false on whther receiver has turbo or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Badges">
            <summary>List of badges that the receiver has.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>RecipientObj constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge">
            <summary>Class representing a single badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.Id">
            <summary>Id of the badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.Version">
            <summary>Version of the badge.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Message">
            <summary>PubSub Message model.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Message.Topic">
            <summary>Topic that the message is relevant to.</summary>
        </member>
        <member name="F:TwitchLib.Models.PubSub.Responses.Message.messageData">
            <summary>Model containing data of the message.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Message.#ctor(System.String)">
            <summary>PubSub Message model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Response">
            <summary>Response object detailing pubsub response</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Response.Error">
            <summary>IF error exists, it will be here</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Response.Nonce">
            <summary>Unique communication token</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Response.Successful">
            <summary>Whether or not successful</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Response.#ctor(System.String)">
            <summary>Response model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.PreviousRequest">
            <summary>Model representing the previous request.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.PreviousRequest.Nonce">
            <summary>Unique communication token.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.PreviousRequest.RequestType">
            <summary>PubSub request type.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.PreviousRequest.Topic">
            <summary>Topic that we are interested in.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.PreviousRequest.#ctor(System.String,TwitchLib.Enums.PubSubRequestType,System.String)">
            <summary>PreviousRequest model constructor.</summary>
        </member>
        <member name="T:TwitchLib.Services.FollowerService">
            <summary>Service that allows customizability and subscribing to detection of new Twitch followers.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ChannelData">
            <summary>Property representing Twitch channel service is monitoring.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ChannelIdentifier">
            <summary>Property representing whether channeldata is a channel name or channel id.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ClientId">
            <summary>Property representing application client Id, also updates it in TwitchApi.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.CacheSize">
            <summary>Property representing the number of followers to compare a fresh query against for new followers. Default: 1000.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.QueryCount">
            <summary>Property representing number of recent followers that service should request. Recommended: 25, increase for larger channels. MAX: 100, MINIMUM: 1</summary>
            <exception cref="T:TwitchLib.Exceptions.Services.BadQueryCountException">Throws BadQueryCountException if queryCount is larger than 100 or smaller than 1.</exception>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ActiveCache">
            <summary>Property representing the cache where detected followers are stored and compared against.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.CheckIntervalSeconds">
            <summary>Property representing interval between Twitch Api calls, in seconds. Recommended: 60</summary>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Service constructor.</summary>
            <exception cref="T:TwitchLib.Exceptions.API.BadResourceException">If channel is invalid, an InvalidChannelException will be thrown.</exception>
            <param name="checkIntervalSeconds">Param representing number of seconds between calls to Twitch Api.</param>
            <param name="queryCount">Number of recent followers service should request from Twitch Api. Max: 100, Min: 1</param>
            <param name="clientId">Optional param representing Twitch Api-required application client id, not required if already set.</param>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.StartService">
            <summary>Downloads recent followers from Twitch, starts service, fires OnServiceStarted event.</summary>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.StopService">
            <summary>Stops service and fires OnServiceStopped event.</summary>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.SetChannelByName(System.String)">
            <summary>Tells FollowerService to request the channel by the channel name.</summary>
            <param name="channelName"></param>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.SetChannelByChannelId(System.String)">
            <summary>Tells FollowerService to request the channel by the channel Id</summary>
            <param name="channelId"></param>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnServiceStarted">
            <summary>Event fires when service starts.</summary>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnServiceStopped">
            <summary>Event fires when service stops.</summary>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnNewFollowersDetected">
            <summary>Event fires when new followers are detected.</summary>
        </member>
        <member name="T:TwitchLib.Services.LiveStreamMonitor">
            <summary>Service that allows customizability and subscribing to detection of channels going online/offline.</summary>
        </member>
        <member name="P:TwitchLib.Services.LiveStreamMonitor.Channels">
            <summary>Property representing Twitch channels service is monitoring.</summary>
        </member>
        <member name="P:TwitchLib.Services.LiveStreamMonitor.ClientId">
            <summary>Property representing application client Id, also updates it in TwitchApi.</summary>
        </member>
        <member name="P:TwitchLib.Services.LiveStreamMonitor.CheckIntervalSeconds">
            <summary>Property representing interval between Twitch Api calls, in seconds. Recommended: 60</summary>
        </member>
        <member name="P:TwitchLib.Services.LiveStreamMonitor.IdentifierType">
            <summary>Property representing whether streams are represented by usernames or userids</summary>
        </member>
        <member name="E:TwitchLib.Services.LiveStreamMonitor.OnStreamOnline">
            <summary>Event fires when Stream goes online</summary>
        </member>
        <member name="E:TwitchLib.Services.LiveStreamMonitor.OnStreamOffline">
            <summary>Event fires when Stream goes online</summary>
        </member>
        <member name="E:TwitchLib.Services.LiveStreamMonitor.OnStreamMonitorStarted">
            <summary>Event fires when service stops.</summary>
        </member>
        <member name="E:TwitchLib.Services.LiveStreamMonitor.OnStreamMonitorEnded">
            <summary>Event fires when service starts.</summary>
        </member>
        <member name="E:TwitchLib.Services.LiveStreamMonitor.OnStreamsSet">
            <summary>Event fires when channels to monitor are intitialized.</summary>
        </member>
        <member name="M:TwitchLib.Services.LiveStreamMonitor.#ctor(System.Int32,System.String)">
            <summary>Service constructor.</summary>
            <exception cref="T:TwitchLib.Exceptions.API.BadResourceException">If channel is invalid, an InvalidChannelException will be thrown.</exception>
            <param name="checkIntervalSeconds">Param representing number of seconds between calls to Twitch Api.</param>
            <param name="clientId">Optional param representing Twitch Api-required application client id, not required if already set.</param>
        </member>
        <member name="M:TwitchLib.Services.LiveStreamMonitor.StartService">
            <summary>Starts service, updates status of all channels, fires OnStreamMonitorStarted event.</summary>
        </member>
        <member name="M:TwitchLib.Services.LiveStreamMonitor.StopService">
            <summary>Stops service and fires OnStreamMonitorStopped event.</summary>
        </member>
        <member name="M:TwitchLib.Services.LiveStreamMonitor.SetStreamsByUsername(System.Collections.Generic.List{System.String})">
            <summary> Sets the list of channels to monitor by username </summary>
            <param name="usernames">List of channels to monitor as usernames</param>
        </member>
        <member name="M:TwitchLib.Services.LiveStreamMonitor.SetStreamsByUserId(System.Collections.Generic.List{System.String})">
            <summary> Sets the list of channels to monitor by username </summary>
            <param name="userids">List of channels to monitor as userids</param>
        </member>
        <member name="T:TwitchLib.Services.MessageThrottler">
            <summary>Class used to throttle chat and whsiper messages to enforce guidelines.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MessagesAllowedInPeriod">
            <summary>Property representing number of messages allowed before throttling in a period.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.PeriodDuration">
            <summary>Property representing the time period for throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MinimumMessageLengthAllowed">
            <summary>Property representing minimum message length for throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MaximumMessageLengthAllowed">
            <summary>Property representing maximum message length before throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.ApplyThrottlingToRawMessages">
            <summary>Property representing whether throttling should be applied to raw messages.</summary>
        </member>
        <member name="M:TwitchLib.Services.MessageThrottler.#ctor(System.Int32,System.TimeSpan,System.Boolean,System.Int32,System.Int32)">
            <summary>messageThrottler constructor.</summary>
        </member>
        <member name="M:TwitchLib.Services.MessageThrottler.MessagePermitted(System.String)">
            <summary>Function that verifies a message is legal, returns true/false on message legality.</summary>
        </member>
        <member name="E:TwitchLib.Services.MessageThrottler.OnClientThrottled">
            <summary>Event fires when service starts.</summary>
        </member>
        <member name="E:TwitchLib.Services.MessageThrottler.OnThrottledPeriodReset">
            <summary>Event fires when service stops.</summary>
        </member>
        <member name="T:TwitchLib.TwitchAPI">
            <summary>Fully featured Twitch API wrapper.</summary>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelAsync(System.String)">
            <summary>
            [ASYNC] Gets a channel object based on a specified OAuth token.<para/>
            Get Channel returns more data than Get Channel by ID because Get Channel is privileged.<para/>
            <para>Required Authentication Scope: channel_read</para>
            </summary>
            <returns>A ChannelPrivileged object including all Channel object info plus email and streamkey.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelByIDAsync(System.String)">
            <summary>
            [ASYNC] Gets a speicified channel object.<para/>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <returns>A Channel object from the response of the Twitch API.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.UpdateChannelAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            [ASYNC] Updates specified properties of a specified channel.<para/>
            In the request, the new properties are specified as a JSON object representation.<para/>
            <para>Required Authentication Scopes: To update delay or channel_feed_enabled parameter: a channel_editor token from the channel owner. To update other parameters: channel_editor.</para>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <param name="status">Description of the broadcaster’s status, displayed as a title on the channel page.</param>
            <param name="game">Name of the game.</param>
            <param name="delay">Channel delay, in seconds. This inserts a delay in the live feed. Requires the channel owner’s OAuth token.</param>
            <param name="channelFeedEnabled">If true, the channel’s feed is turned on. Requires the channel owner’s OAuth token. Default: false.</param>
            <returns>A Channel object with the newly changed properties.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelEditorsAsync(System.String,System.String)">
            <summary>
            <para>[ASYNC] Gets a list of users who are editors for a specified channel.</para>
            <para>Required Authentication Scope: channel_read</para>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <returns>A ChannelEditors object that contains an array of the Users which are Editor of the channel.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelFollowersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            <para>[ASYNC] Gets a list of users who follow a specified channel, sorted by the date when they started following the channel (newest first, unless specified otherwise).</para>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <param name="limit">Maximum number of objects to return. Default: 25. Maximum: 100.</param>
            <param name="offset">Object offset for pagination of results. Default: 0.</param>
            <param name="cursor">Tells the server where to start fetching the next set of results, in a multi-page response.</param>
            <param name="direction">Sorting direction. Valid values: "asc", "desc" (newest first). Default: "desc".</param>
            <returns>A ChannelFollowers object that represents the response from the Twitch API.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetAllFollowersAsync(System.String)">
            <summary>
            [ASYNC] Gets all of the followers a channel has. THIS IS A VERY EXPENSIVE CALL AND CAN TAKE A LONG TIME IF THE CHANNEL HAS A LOT OF FOLLOWERS. NOT RECOMMENDED.
            </summary>
            <param name="channelId">THe specified channelId of the channel to get the information from.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelTeamsAsync(System.String)">
            <summary>
            <para>[ASYNC] Gets a list of teams to which a specified channel belongs.</para>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <returns>An Array of the Teams the Channel belongs to.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelSubscribersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            <para>[ASYNC] Gets a list of users subscribed to a specified channel, sorted by the date when they subscribed.</para>
            <para>Required Authentication Scope: channel_subscriptions</para>
            </summary>
            <param name="channelId">The specified channelId of the channel to get the information from.</param>
            <param name="limit">Maximum number of objects to return. Default: 25. Maximum: 100.</param>
            <param name="offset">Object offset for pagination of results. Default: 0.</param>
            <param name="direction">Sorting direction. Valid values: "asc", "desc" (newest first). Default: "desc".</param>
            <param name="authToken">The associated auth token for this request.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetAllSubscribersAsync(System.String,System.String)">
            <summary>
            [ASYNC] Makes a number of calls to get all subscriber objects belonging to a channel. THIS IS AN EXPENSIVE OPERATION.
            </summary>
            <param name="channelId">ChannelId indicating channel to get subs from.</param>
            <param name="accessToken">The associated auth token for this request.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.CheckChannelSubscriptionByUserAsync(System.String,System.String,System.String)">
            <summary>
            <para>[ASYNC] Checks if a specified channel has a specified user subscribed to it. Intended for use by channel owners.</para>
            <para>Returns a subscription object which includes the user if that user is subscribed. Requires authentication for the channel.</para>
            <para>Required Authentication Scope: channel_check_subscription</para>
            </summary>
            <param name="channelId">The specified channel to check the subscription on.</param>
            <param name="userId">The specified user to check for.</param>
            <returns>Returns a subscription object or null if not subscribed.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.ResetChannelStreamKeyAsync(System.String,System.String)">
            <summary>
            <para>[ASYNC] Deletes the stream key for a specified channel. Once it is deleted, the stream key is automatically reset.</para>
            <para>A stream key (also known as authorization key) uniquely identifies a stream. Each broadcast uses an RTMP URL that includes the stream key. Stream keys are assigned by Twitch.</para>
            <para>Required Authentication Scope: channel_stream</para>
            </summary>
            <param name="channelId">The specified channel to reset the StreamKey on.</param>
            <returns>A ChannelPrivileged object that also contains the email and stream key of the channel aside from the normal channel values.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.GetChannelCommunityAsync(System.String,System.String)">
            <summary>
            <para>[ASYNC] Gets the community for a specified channel.</para>
            <para>Required Authentication Scope: channel_editor</para>
            </summary>
            <param name="channelId">The specified channel ID to get the community from.</param>
            <returns>A Community object that represents the community the channel is in.</returns>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.SetChannelCommunityAsync(System.String,System.String,System.String)">
            <summary>
            <para>[ASYNC]Sets a specified channel to be in a specified community.</para>
            <para>Required Authentication Scope: channel_editor</para>
            </summary>
            <param name="channelId">The specified channel to set the community for.</param>
            <param name="communityId">The specified community to set the channel to be a part of.</param>
        </member>
        <member name="M:TwitchLib.TwitchAPI.Channels.v5.DeleteChannelFromCommunityAsync(System.String,System.String)">
            <summary>
            [ASYNC] Deletes a specified channel from its community.
            </summary>
            <param name="channelId">The specified channel to be removed.</param>
        </member>
        <member name="T:TwitchLib.TwitchAPI.Undocumented">
            <summary>These endpoints are pretty cool, but they may stop working at anytime due to changes Twitch makes.</summary>
        </member>
        <member name="T:TwitchLib.TwitchAPI.ThirdParty">
            <summary>These endpoints are offered by third party services (NOT TWITCH), but are still pretty cool.</summary>
        </member>
        <member name="T:TwitchLib.TwitchAPI.Debugging">
            <summary>These methods are intended to aid in developing the library.</summary>
        </member>
        <member name="T:TwitchLib.TwitchAPI.APIHelpers">
            <summary>Private methods that are used within the API.</summary>
        </member>
        <member name="T:TwitchLib.TwitchClient">
            <summary>Represents a client connected to a Twitch channel.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.JoinedChannels">
            <summary>A list of all channels the client is currently in.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.TwitchUsername">
            <summary>Username of the user connected via this library.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.PreviousWhisper">
            <summary>The most recent whisper received.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.IsConnected">
            <summary>The current connection status of the client.</summary>
        </member>
        <member name="F:TwitchLib.TwitchClient.ChatThrottler">
            <summary>Assign this property a valid MessageThrottler to apply message throttling on chat messages.</summary>
        </member>
        <member name="F:TwitchLib.TwitchClient.WhisperThrottler">
            <summary>Assign this property a valid MessageThrottler to apply message throttling on whispers.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.ChannelEmotes">
            <summary>The emotes this channel replaces.</summary>
            <remarks>
                Twitch-handled emotes are automatically added to this collection (which also accounts for
                managing user emote permissions such as sub-only emotes). Third-party emotes will have to be manually
                added according to the availability rules defined by the third-party.
            </remarks>
        </member>
        <member name="P:TwitchLib.TwitchClient.DisableAutoPong">
            <summary>Will disable the client from sending automatic PONG responses to PING</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.WillReplaceEmotes">
            <summary>Determines whether Emotes will be replaced in messages.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.OverrideBeingHostedCheck">
            <summary>If set to true, the library will not check upon channel join that if BeingHosted event is subscribed, that the bot is connected as broadcaster. Only override if the broadcaster is joining multiple channels, including the broadcaster's.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.ConnectionCredentials">
            <summary>Provides access to connection credentials object.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.Logging">
            <summary>Provides access to logging on off boolean.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.AutoReListenOnException">
            <summary>Provides access to autorelistiononexception on off boolean.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.Logger">
            <summary>Provides access to a Logger</summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnLog">
            <summary>
            Fires whenever a log write happens.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnConnected">
            <summary>
            Fires when client connects to Twitch.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnJoinedChannel">
            <summary>
            Fires when client joins a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnIncorrectLogin">
            <summary>
            Fires on logging in with incorrect details, returns ErrorLoggingInException.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChannelStateChanged">
            <summary>
            Fires when connecting and channel state is changed, returns ChannelState.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserStateChanged">
            <summary>
            Fires when a user state is received, returns UserState.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnMessageReceived">
            <summary>
            Fires when a new chat message arrives, returns ChatMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperReceived">
            <summary>
            Fires when a new whisper arrives, returns WhisperMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnMessageSent">
            <summary>
            Fires when a chat message is sent, returns username, channel and message.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperSent">
            <summary>
            Fires when a whisper message is sent, returns username and message.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatCommandReceived">
            <summary>
            Fires when command (uses custom chat command identifier) is received, returns channel, command, ChatMessage, arguments as string, arguments as list.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperCommandReceived">
            <summary>
            Fires when command (uses custom whisper command identifier) is received, returns command, Whispermessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserJoined">
            <summary>
            Fires when a new viewer/chatter joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorJoined">
            <summary>
            Fires when a moderator joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorLeft">
            <summary>
            Fires when a moderator joins the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnNewSubscriber">
            <summary>
            Fires when new subscriber is announced in chat, returns Subscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnReSubscriber">
            <summary>
            Fires when current subscriber renews subscription, returns ReSubscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostLeft">
            <summary>
            Fires when a hosted streamer goes offline and hosting is killed.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnExistingUsersDetected">
            <summary>
            Fires when Twitch notifies client of existing users in chat.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserLeft">
            <summary>
            Fires when a PART message is received from Twitch regarding a particular viewer
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostingStarted">
            <summary>
            Fires when the joined channel begins hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostingStopped">
            <summary>
            Fires when the joined channel quits hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnDisconnected">
            <summary>
            Fires when bot has disconnected.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnConnectionError">
            <summary>
            Forces when bot suffers conneciton error.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatCleared">
            <summary>
            Fires when a channel's chat is cleared.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserTimedout">
            <summary>
            Fires when a viewer gets timedout by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnLeftChannel">
            <summary>
            Fires when client successfully leaves a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserBanned">
            <summary>
            Fires when a viewer gets banned by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorsReceived">
            <summary>
            Fires when a list of moderators is received.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatColorChanged">
            <summary>
            Fires when confirmation of a chat color change request was received.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnSendReceiveData">
            <summary>
            Fires when data is either received or sent.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnNowHosting">
            <summary>
            Fires when client receives notice that a joined channel is hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnBeingHosted">
            <summary>
            Fires when the library detects another channel has started hosting the broadcaster's stream. MUST BE CONNECTED AS BROADCASTER.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.#ctor(TwitchLib.Models.Client.ConnectionCredentials,System.String,System.Char,System.Char,System.Boolean,TwitchLib.Logging.ILogger,System.Boolean)">
            <summary>
            Initializes the TwitchChatClient class.
            </summary>
            <param name="channel">The channel to connect to.</param>
            <param name="credentials">The credentials to use to log in.</param>
            <param name="chatCommandIdentifier">The identifier to be used for reading and writing commands from chat.</param>
            <param name="whisperCommandIdentifier">The identifier to be used for reading and writing commands from whispers.</param>
            <param name="logging">Whether or not loging to console should be enabled.</param>
            <param name="logger">Logger Type.</param>
            <param name="autoReListenOnExceptions">By default, TwitchClient will silence exceptions and auto-relisten for overall stability. For debugging, you may wish to have the exception bubble up, set this to false.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendRaw(System.String)">
            <summary>
            Sends a RAW IRC message.
            </summary>
            <param name="message">The RAW message to be sent.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(TwitchLib.Models.Client.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Sends a formatted Twitch channel chat message.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
            <param name="channel">Channel to send message to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(System.String,System.String,System.Boolean)">
            <summary>
            SendMessage wrapper that accepts channel in string form.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(System.String,System.Boolean)">
            <summary>
            SendMessage wrapper that sends message to first joined channel.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendWhisper(System.String,System.String,System.Boolean)">
            <summary>
            Sends a formatted whisper message to someone.
            </summary>
            <param name="receiver">The receiver of the whisper.</param>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.Connect">
            <summary>
            Start connecting to the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.Disconnect">
            <summary>
            Start disconnecting from the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.Reconnect">
            <summary>
            Reconnects to Twitch channel given existing login credentials
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.AddChatCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.RemoveChatCommandIdentifier(System.Char)">
            <summary>
            Removes a character from a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.AddWhisperCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.RemoveWhisperCommandIdentifier(System.Char)">
            <summary>
            Removes a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.JoinChannel(System.String,System.Boolean)">
            <summary>
            Join the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The channel to join.</param>
            <param name="overrideCheck">Override a join check.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetJoinedChannel(System.String)">
            <summary>
            Returns a JoinedChannel object using a passed string/>.
            </summary>
            <param name="channel">String channel to search for.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.LeaveChannel(System.String)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The channel to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.TwitchClient.LeaveChannel(TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The JoinedChannel object to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators(TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends a request to get channel moderators. You MUST listen to OnModeratorsReceived event./>.
            </summary>
            <param name="channel">JoinedChannel object to designate which channel to send request to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators(System.String)">
            <summary>
            Sends a request to get channel moderators. You MUST listen to OnModeratorsReceived event./>.
            </summary>
            <param name="channel">String representing channel to designate which channel to send request to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators">
            <summary>
            Sends a request to get channel moderators. Request sent to first joined channel. You MUST listen to OnModeratorsReceived event./>.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.OnReadLineTest(System.String)">
            <summary>
            This method allows firing the message parser with a custom irc string allowing for easy testing
            </summary>
            <param name="rawIrc">This should be a raw IRC message resembling one received from Twitch IRC.</param>
        </member>
        <member name="T:TwitchLib.TwitchPubSub">
            <summary>Class represneting interactions with the Twitch PubSub</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceConnected">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceError">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceClosed">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnListenResponse">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnTimeout">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnBan">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnUnban">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnUntimeout">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnHost">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnSubscribersOnly">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnSubscribersOnlyOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnClear">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnEmoteOnly">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnEmoteOnlyOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnR9kBeta">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnR9kBetaOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnBitsReceived">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnStreamUp">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnStreamDown">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnViewCount">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnWhisper">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnChannelSubscription">
            <summary>EventHandler for channel subscriptions.</summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.#ctor(System.Boolean)">
            <summary>
            Constructor for a client that interface's with Twitch's new PubSub system.
            </summary>
            <param name="_logging">Set this true to have raw messages from PubSub system printed to console.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToChatModeratorActions(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a request to listenOn timeouts and bans in a specific channel
            </summary>
            <param name="myTwitchId">A moderator's twitch acount's ID (can be fetched from TwitchApi)</param>
            <param name="channelTwitchId">Channel ID who has previous parameter's moderator (can be fetched from TwitchApi)</param>
            <param name="moderatorOAuth">Moderator OAuth key (can be OAuth key with any scope)</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToBitsEvents(System.String)">
            <summary>
            Sends request to listenOn bits events in specific channel
            </summary>
            <param name="channelTwitchId">Channel Id of channel to listen to bits on (can be fetched from TwitchApi)</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToVideoPlayback(System.String)">
            <summary>
            Sends request to listenOn video playback events in specific channel
            </summary>
            <param name="channelTwitchId">Channel Id of channel to listen to playback events in.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToWhispers(System.String)">
            <summary>
            Sends request to listen to whispers from specific channel.
            </summary>
            <param name="channelTwitchId">Channel to listen to whispers on.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToSubscriptions(System.String)">
            <summary>
            Sends request to listen to channel subscriptions.
            </summary>
            <param name="channelId">Id of the channel to listen to.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.Connect">
            <summary>
            Method to connect to Twitch's PubSub service. You MUST listen toOnConnected event and listen to a Topic within 15 seconds of connecting (or be disconnected)
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.Disconnect">
            <summary>
            What do you think it does? :)
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.TestMessageParser(System.String)">
            <summary>
            This method will send passed json text to the message parser in order to allow forOn-demand parser testing.
            </summary>
            <param name="testJsonString"></param>
        </member>
    </members>
</doc>
